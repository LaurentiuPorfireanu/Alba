version: '3.8'

services:
  # Main application
  network-security-ai:
    build: .
    container_name: security_ai_main
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - PYTHONPATH=/app
    volumes:
      - ./data:/app/data
      - ./models:/app/models
    networks:
      - security_network
    depends_on:
      - redis
      - target_server
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: security_ai_redis
    ports:
      - "6379:6379"
    networks:
      - security_network
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # Target server to simulate attacks against
  target_server:
    image: nginx:alpine
    container_name: security_ai_target
    ports:
      - "8080:80"
      - "8443:443"
    networks:
      - security_network
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro

  # Traffic generator container
  traffic_generator:
    build:
      context: .
      dockerfile: docker/Dockerfile.traffic
    container_name: security_ai_traffic
    networks:
      - security_network
    depends_on:
      - target_server
    environment:
      - TARGET_HOST=target_server
      - TRAFFIC_RATE=10
    restart: unless-stopped

  # Network monitoring container
  network_monitor:
    build:
      context: .
      dockerfile: docker/Dockerfile.monitor
    container_name: security_ai_monitor
    networks:
      - security_network
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ./data/logs:/app/logs
    depends_on:
      - network-security-ai

networks:
  security_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
